#!/usr/bin/env -S guile --r7rs -e main -s
!# ; -*- mode: scheme -*-
(import (scheme base)
        (scheme comparator)
        (scheme hash-table)
        (scheme list)
        (scheme set))

(define (read-numbers-from-port port)
  (let loop ((nums '()))
    (let ((line (read-line port)))
      (if (eof-object? line) nums
          (loop (cons (string->number line) nums))))))

(define (read-numbers-from-file file)
  (let* ((port (open-input-file file))
         (numbers (read-numbers-from-port port)))
    (close-port port)
    numbers))

(define number-comparator
  (make-comparator number? = < number-hash))

(define (find-matching-two numbers)
  (let ((num-set (list->set number-comparator numbers)))
    (any (lambda (n)
           (let ((m (- 2020 n)))
             (and (set-contains? num-set m)
                  (* n m))))
         numbers)))

(define (find-matching-three numbers)
  (let ((num-hash (make-hash-table number-comparator)))
    (for-each (lambda (n)
                (for-each (lambda (m)
                            (hash-table-set! num-hash (+ n m) (list n m)))
                          numbers))
              numbers)
    (any (lambda (n)
           (let* ((m (- 2020 n))
                  (r (hash-table-ref/default num-hash m #f)))
             (and r (apply * n r))))
         numbers)))

(define (print-usage args)
  (let ((prog (first args)))
    (display (string-append "usage: " prog " <input-file> [2-or-3]\n")
             (current-error-port))))

(define (main args)
  (let* ((argc (length args))
         (proc (cond ((= 2 argc)
                      find-matching-two)
                     ((and (= 3 argc) (string=? (third args) "2"))
                      find-matching-two)
                     ((and (= 3 argc) (string=? (third args) "3"))
                      find-matching-three)
                     (else #f))))
    (if proc
        (let* ((file (second args))
               (numbers (read-numbers-from-file file))
               (result (proc numbers)))
          (write result)
          (newline))
        (print-usage args))))
